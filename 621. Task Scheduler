https://leetcode.com/problems/task-scheduler/

reference : https://leetcode.com/problems/task-scheduler/discuss/850752/Easy-to-Understand-Detailed-Explanation

c++
----

struct compare { 
    bool operator()(pair<char, int> p1, pair<char, int> p2) 
    { 
        if (p1.second == p2.second) 
            return p1.first < p2.first; 
  
        return p1.second < p2.second; 
    } 
}; 
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        if(n == 0) return tasks.size();

        unordered_map<char, int> um; 
        for (int i = 0; i < tasks.size(); i++) 
            um[tasks[i]]++; 
  
        priority_queue<pair<char, int>, vector<pair<char, int> >, 
                   compare> 
        pq(um.begin(), um.end()); 
        
        int chunk,idleSports;
        if(!pq.empty())
        {
            chunk = pq.top().second - 1;
            idleSports = chunk * n;
            pq.pop();
        }
        while(!pq.empty())
        { 
            idleSports -= min(chunk,pq.top().second);
            pq.pop();           
        }
        
        if(idleSports < 0)
            idleSports = 0;
        return idleSports+tasks.size();
        
    }
};
