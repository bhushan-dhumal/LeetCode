https://leetcode.com/problems/intersection-of-two-linked-lists/
-------------------------------------------------------------------

C++ (Two pointers)
----
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
                        int i = [ ] ( ) {
std::ios::sync_with_stdio(false); std::cin.tie(nullptr); return 0;
}();
        
        ListNode* currA =headA;
        ListNode* currB =headB;
        while(true)
        {
            if(currA == currB)
                return currA;
            
            if(currA)
                currA = currA->next;
            else
                currA = headB;
            
            if(currB)
                currB = currB->next;
            else
                currB = headA;
        }
        
    }
};


explaination
--------------
Approach: Two Pointers
Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time.
When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); similarly when pB reaches the end of a list, redirect it the head of A.
If at any point pA meets pB, then pA/pB is the intersection node.
To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, which are intersected at node '9'. Since B.length (=4) < A.length (=6), pB would reach the end of the merged list first, because pBpB traverses exactly 2 nodes less than pApA does. By redirecting pBpB to head A, and pA to head B, we now ask pBpB to travel exactly 2 more nodes than pA would. So in the second iteration, they are guaranteed to reach the intersection node at the same time.
If two lists have intersection, then their last nodes must be the same one. So when pApA/pBpB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the two lists have no intersections.
Complexity Analysis

Time complexity : O(m+n).

Space complexity : O(1).

c++(using stack)
----
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
                        int i = [ ] ( ) {
std::ios::sync_with_stdio(false); std::cin.tie(nullptr); return 0;
}();
        
        vector<ListNode*> a;
        vector<ListNode*> b;
        while(headA)
        {
            a.push_back(headA);
            headA= headA->next;
        }
        while(headB)
        {
            b.push_back(headB);
            headB= headB->next;
        }
        ListNode* res =nullptr;
        while(!a.empty() && !b.empty() && a.back()== b.back())
        {
            res = a.back(); 
            a.pop_back();
            b.pop_back();

        }
        return res;
        
    }
};
