https://leetcode.com/problems/task-scheduler/

reference : https://leetcode.com/problems/task-scheduler/discuss/850752/Easy-to-Understand-Detailed-Explanation

c++
----

struct compare { 
    bool operator()(pair<char, int> p1, pair<char, int> p2) 
    { 
        if (p1.second == p2.second) 
            return p1.first < p2.first; 
  
        return p1.second < p2.second; 
    } 
}; 
class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        if(n == 0) return tasks.size();

        unordered_map<char, int> um; 
        for (int i = 0; i < tasks.size(); i++) 
            um[tasks[i]]++; 
  
        priority_queue<pair<char, int>, vector<pair<char, int> >, 
                   compare> 
        pq(um.begin(), um.end()); 
        
        int chunk,idleSports;
        if(!pq.empty())
        {
            chunk = pq.top().second - 1;
            idleSports = chunk * n;
            pq.pop();
        }
        while(!pq.empty())
        { 
            idleSports -= min(chunk,pq.top().second);
            pq.pop();           
        }
        
        if(idleSports < 0)
            idleSports = 0;
        return idleSports+tasks.size();
        
    }
};

c++ (better approch)
---

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        if(n == 0)return tasks.size();
        int freq[26] = {0};
        for(char ch: tasks)
            freq[ch-'A'] += 1;
        
        sort(freq,freq+26);
        
        int most = freq[25]-1; //max freq element at last;
        int idle = (most)*n;
        
        for(int i=24;i>=0;i--)
        {
            idle -= min(most,freq[i]);
            if(idle <= 0)return tasks.size();
        }
        return idle+tasks.size();
    }
};

c++
---

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {        
        int freq[26];
        memset(freq,0,sizeof(freq));
        int highest_freq = 0;
        for(const char ch : tasks)
        {
            freq[ch -'A']++;
            highest_freq = max(highest_freq,freq[ch -'A']);
            
        }
        
        int tasks_with_highest_freq = 0;
        for(int i =0;i<26;i++)
        {
            if(freq[i] == highest_freq)
                tasks_with_highest_freq++;
        }
        
        int idleSpots = (highest_freq-1)*(n+1);
        int ts = tasks.size();
        return max(ts,(idleSpots+ tasks_with_highest_freq));
        
    }
};
