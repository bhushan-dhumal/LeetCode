{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/maximum-subarray/"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://leetcode.com/problems/maximum-subarray/}}\
Approach 1: Kadanes\
class Solution \{\
    public int maxSubArray(int[] nums) \{\
        int current_max = nums[0]; \
        int max_global = nums[0];\
        \
        for(int i = 1; i <= nums.length - 1; i++)\{\
            current_max = Math.max(nums[i], current_max + nums[i]);\
            \
            if(current_max > max_global)\{\
                max_global = current_max;\
            \}\
        \}\
        \
        return max_global;\
    \}\
\}\
}