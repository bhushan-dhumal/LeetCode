{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/climbing-stairs/"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://leetcode.com/problems/climbing-stairs/}}\
Approach 1: \
class Solution \{\
    int[] memo = new int[46];\
    public int climbStairs(int n) \{\
        if(n < 0) \{\
            return 0;\
        \} else if (n == 0)\{\
            return 1;\
        \}\
        \
        if(memo[n] != 0)\{\
            return memo[n];\
        \}\
        // 0 , 1 , 1 , 2 , 3, 5\
        int totalStep = 0;\
        totalStep = climbStairs( n - 1);\
        totalStep = totalStep + climbStairs( n - 2);\
        memo[n] = totalStep;\
        return totalStep;\
    \}\
\}\
\
Approach 2:\
class Solution \{\
    public int climbStairs(int n) \{\
        \
        int[] numSteps = new int[n];\
        \
        if(n == 1 ) \{\
            return 1;\
        \}\
        \
        if(n == 2) \{\
            return 2;\
        \}\
        \
        numSteps[0] = 1;\
        numSteps[1] = 2;\
        \
        for(int i=2; i< numSteps.length; i++) \{\
            numSteps[i] = numSteps[i-1] + numSteps[i-2];\
        \}\
        \
        return numSteps[n-1];\
        \
        //return climbStairsRecursive(n);\
    \}}