{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //{\field{\*\fldinst{HYPERLINK "https://leetcode.com/problems/min-stack/"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://leetcode.com/problems/min-stack/}}\
Approach 1:\
class MinStack \{\
    Deque<Integer> actual_stack;\
    Deque<Integer> sorted_stack;\
    /** initialize your data structure here. */\
    public MinStack() \{\
        actual_stack = new ArrayDeque<Integer>();\
        sorted_stack = new ArrayDeque<Integer>();\
    \}\
    \
    public void push(int x) \{\
        if(sorted_stack.size() > 0)\
        \{   int elem = sorted_stack.pop();\
            if(x < elem) \{\
                sorted_stack.push(elem);\
                sorted_stack.push(x);\
            \} else \{\
                sorted_stack.push(x);\
                sorted_stack.push(elem);\
            \}\
        \} else \{\
            sorted_stack.push(x);\
        \}\
        actual_stack.push(x) ;\
    \}\
    \
    public void pop() \{\
        if(actual_stack.size() > 0) \{\
            int valToPop = actual_stack.pop();\
            Deque<Integer> temp = new ArrayDeque<Integer>();\
            while(sorted_stack.size() > 0) \{\
                int val = sorted_stack.pop();\
                if(val == valToPop) \{\
                   break;\
                \} else \{\
                     temp.push(val);\
                \}\
            \}\
            while(temp.size() > 0) \{\
                int val = temp.pop();\
                if(val != valToPop) \{\
                    sorted_stack.push(val);\
                \}\
            \}\
        \}\
    \}\
    \
    public int top() \{\
        return actual_stack.peek();\
    \}\
    \
    public int getMin() \{\
        if(sorted_stack.size() == 0) \{\
            return -1;\
        \}\
        return sorted_stack.peek();\
    \}\
\}\
\
//sortedstack = 0 | -2 | -3 \
//actual = -2 | 0 | -3  \
\
\
/**\
 * Your MinStack object will be instantiated and called as such:\
 * MinStack obj = new MinStack();\
 * obj.push(x);\
 * obj.pop();\
 * int param_3 = obj.top();\
 * int param_4 = obj.getMin();\
 */}