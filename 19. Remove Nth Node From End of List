https://leetcode.com/problems/remove-nth-node-from-end-of-list/


C++
----
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// Own attempt
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) 
    {
        ListNode* end = head;
        while(--n!=0)
        {
            end = end->next;
        }
        if(print) cout<<"end is "<<end->val<<endl;
        ListNode* prev = head;
        end = end->next;
        while(end && end->next)
        {
            end = end->next;
            prev = prev->next;
        }
        if(prev != head || end)
        {
            // if prev is not head then prev is valid
            // if link list has valid end and prev is pointing to head then prev is pointing to correct value
            if(print) cout<<"prev is "<<prev->val<<endl;
            ListNode* curr = prev->next;
            prev->next = curr->next;
            curr->next = nullptr;
        }
        else
        {
            // if prev is head but end is invalid then prev is incorrect
            // we should just change head to next and make head/prev's next invalid
            head = head->next;
            prev->next = nullptr;
        }
      
        return head;
        
    }
    bool print = false;
};


// Optimised Solution
    ListNode* removeNthFromEnd(ListNode* head, int n) 
    {
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* first = dummy;
        ListNode* second = dummy;
        
        // Advances first pointer so that the gap between first and second is n nodes apart
        for (int i = 1; i <= n + 1; i++)
        {
            first = first->next;
        }
        
        // Move first to the end, maintaining the gap
        while(first)
        {
            first = first->next;
            second = second->next;
        }
        
        second->next = second->next ? second->next->next : nullptr;
        return dummy->next;
    }
