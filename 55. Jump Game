https://leetcode.com/problems/jump-game/


c++
----

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int max_jump = 0;
        for(int i =0;i<nums.size();i++)
        {
            if(i> max_jump)
                return false;
            max_jump = max(max_jump,i+nums[i]);
        }
        return true;
    }
};


C++ (own try | recursion | time limit exceed)
---------------------------------------------

class Solution {
public:
    bool canJump(vector<int>& nums) {
        if(nums.size() == 1) return true;
        vector<int> dp(nums.size(),-1);
        return canJump(nums,0,dp);
    }
    bool canJump(vector<int>& nums, int curr_idx,vector<int>& dp)
    {
        if(curr_idx == nums.size()-1)
        {
            dp[curr_idx] = 1;
            return true;            
        }

        if(curr_idx > nums.size()-1)
        {
            cout<<"Reach to beyond end"<<endl;
            return false;
        }
        if(dp[curr_idx] != -1)
        {
            return dp[curr_idx];
        }
        for(int i =1; i <= nums[curr_idx];i++)
        {     
            if(canJump(nums,curr_idx+i,dp))
            {
                // cout<<"Found for "<<nums[curr_idx]<<" "<<endl;
                dp[curr_idx] = 1;
                return true; 
             }
        }
        dp[curr_idx] = 0;
        return false;
            
    }
};
